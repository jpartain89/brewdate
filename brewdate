#!/bin/bash -e

# Single-worded command to - for now as of 3.20.16 at 7:14 am -
# update, upgrade, cleanup and "doctor" homebrew and brew cask.

# Now self-installs

# Copyright Â© 2017 JPCDI, JPartain89 and Justin Partain
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Program information
PROGRAM_NAME="brewdate"
VERSION="2.8.3"

export PATH="/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin:/usr/local/opt/python/libexec/bin:/usr/local/Cellar"

if [[ ! -e "$(command -v allunix)" ]]; then
    echo "AllUnix file is missing."
    wget -O - http://bit.ly/jp_allunix | bash
fi

. "$(command -v allunix)"
git_local_bin_install
no_sudo

function onError() {
    status=$?
    script=$0
    line=$1
    shift
    args=
    for i in "$@"; do
        args+="\"$i\" "
    done

cat <<- EOF

------------------------------------------------------------
Error occured on "$script" [Line "$line"]: Status $status

PID: $$
User: "$USER"
Current directory: "$PWD"
Command line: "$script $args"
------------------------------------------------------------

EOF
}

trap 'onError $LINENO "$@"' ERR

function brew_var {
    echo ""
    echo "Brew Update"
    echo ""
    /usr/local/bin/brew update;
    echo ""
    echo "Brew Upgrade"
    echo ""
    /usr/local/bin/brew upgrade && echo "Completed/Nothing to do"
    echo ""
    echo "Brew Cleanup"
    echo ""
    /usr/local/bin/brew cleanup && echo "Completed/Nothing to do"
    echo ""
    echo "Brew Prune"
    echo ""
    /usr/local/bin/brew prune && echo "Completed/Nothing to do"
    echo ""
    echo "Brew Doctor"
    echo ""
    /usr/local/bin/brew doctor;
    echo ""
    echo "Brew Cask Cleanup"
    echo ""
    /usr/local/bin/brew cask cleanup;
    echo ""
    echo "Brew Cask Doctor"
    echo ""
    /usr/local/bin/brew cask doctor
}

function brew_quiet {
    { /usr/local/bin/brew update;
    /usr/local/bin/brew upgrade;
    /usr/local/bin/brew cleanup;
    /usr/local/bin/brew prune;
    /usr/local/bin/brew doctor;
    /usr/local/bin/brew cask cleanup;
    /usr/local/bin/brew cask doctor;
        } >>"${HOME}/Library/Logs/brewdate.log" 2>&1
}

function help_text {
cat << EOF
Usage: brewdate
[ -h, --help | -V, --version | -q, --quiet ]

This is a simple wrapper script that just auto-runs:

    brew update
    brew upgrade
    brew cleanup
    brew prune
    brew doctor
    brew cask update
    brew cask cleanup
        and
    brew cask doctor

The -q and --quiet options attempt to silence ALL output into a log file.
EOF
}

if [ $# -ge 1 ]; then
    while [ $# -ge 1 ]; do
        case "$1" in
            -h | --help )
                help_text; exit 0;;
            -V | --version )
                HELP_VERSION; exit 0;;
            -q | --quiet )
                brew_quiet; exit 0;;
            * )
                help_text; exit 1;;
        esac
    done
else
    brew_var; EXIT_NORM
fi
